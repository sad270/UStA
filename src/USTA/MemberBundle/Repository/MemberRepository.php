<?php

namespace USTA\MemberBundle\Repository;

use Doctrine\ORM\Tools\Pagination\Paginator;

/**
 * MemberRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class MemberRepository extends \Doctrine\ORM\EntityRepository
{
  public function search($searchString, $page, $nbPerPage)
  {
    //http://stackoverflow.com/questions/17534796/match-against-script-is-not-working-with-symfony2
    $query = $this->getEntityManager()->createQueryBuilder('m')
      ->select('m')
      ->addSelect('MATCH (m.lastname) AGAINST (:search boolean) AS HIDDEN lastname_revelance')
      ->addSelect('MATCH (m.lastname, m.firstname) AGAINST (:search boolean) AS HIDDEN lastname_firstname_revelance')
      ->from('USTAMemberBundle:Member', 'm')
      ->Where('MATCH (m.lastname, m.firstname) AGAINST (:search boolean) > 0')
      ->andWhere('m.deathDate IS NULL')
      ->setParameter('search', $searchString .'*')
      ->orderBy('lastname_revelance DESC, lastname_firstname_revelance', 'DESC')
      ->getQuery()
      ;
      $query
        // On définit l'annonce à partir de laquelle commencer la liste
        ->setFirstResult(($page-1) * $nbPerPage)
        // Ainsi que le nombre d'annonce à afficher sur une page
        ->setMaxResults($nbPerPage)
      ;

      // Enfin, on retourne l'objet Paginator correspondant à la requête construite
      // (n'oubliez pas le use correspondant en début de fichier)
      return new Paginator($query, true);

  }
  public function getLastDeath($page, $nbPerPage)
  {
    //http://stackoverflow.com/questions/17534796/match-against-script-is-not-working-with-symfony2
    $query = $this->getEntityManager()->createQueryBuilder('m')
      ->select('m')
      ->from('USTAMemberBundle:Member', 'm')
      ->Where('m.deathDate IS NOT NULL')
      ->orderBy('m.deathDate', 'DESC')
      ->getQuery()
      ;
      $query
        // On définit l'annonce à partir de laquelle commencer la liste
        ->setFirstResult(($page-1) * $nbPerPage)
        // Ainsi que le nombre d'annonce à afficher sur une page
        ->setMaxResults($nbPerPage)
      ;

      // Enfin, on retourne l'objet Paginator correspondant à la requête construite
      // (n'oubliez pas le use correspondant en début de fichier)
      return new Paginator($query, true);

  }

  public function findByFamilyBuilder($family)
  {
    return $this
      ->createQueryBuilder('m')
      ->where('m.family = :family')
      ->setParameter('family', $family)
    ;
  }
}
